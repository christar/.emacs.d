#+TITLE: christar's emacs config
#+OPTIONS: toc:2 h:2
#+STARTUP: content

* DONE Startup
** define platform                                           :mac:linux:win:
Define the variable for each platform

#+begin_src emacs-lisp :tangle yes
(defun mac-p ()
    (eq system-type 'darwin))
(defun linux-p ()
    (eq system-type 'gnu/linux))
(defun win-p ()
    (eq system-type 'windows-nt))
#+end_src

** startup config                                            :win:mac:linux:
Hide Scrollbar on Windows
Hide Toolbar on Windows
Hide ^M on Windows

Remove Welcome Screen
Remove Beep on Windows
Hide Menu Bar
Set Encoding from Windows style(CRLF) to Unix style(LF)

#+begin_src emacs-lisp :tangle yes
(when (win-p)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (blink-cursor-mode 0))
(setq inhibit-startup-screen t)
(setq visible-bell 1)
(menu-bar-mode -1)
(prefer-coding-system 'utf-8-unix)
(modify-coding-system-alist 'file "\\.bat\\'" 'utf-8-dos)
#+end_src

** emacs server                                                        :win:
#+begin_src emacs-lisp :tangle yes
(require 'server)
(if (eq system-type 'windows-nt)
    (or (server-running-p)
        (server-start)))
#+end_src

** load custom settings                                               :work:
e.g. Work Proxy Server

#+begin_src emacs-lisp :tangle yes
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+end_src

** ELPA repo                                        :work:mac:linux:win:pac:
GnuTLS manually installed by installing deps package from Emacs FTP server

#+begin_src emacs-lisp :tangle yes
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** use-package                                                     :pac:TBC:
There is a debate between using package.el and use-package.el
Should look into that later

CHECKME -> bug installing diminish package

#+begin_src emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
    (defvar use-package-verbose t)
    (defvar use-package-always-ensure t)
    (require 'use-package))
(use-package diminish)
(use-package auto-compile
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode)
    (setq auto-compile-display-buffer               nil)
    (setq auto-compile-mode-line-counter            t)
    (setq auto-compile-source-recreate-deletes-dest t)
    (setq auto-compile-toggle-deletes-nonlib-dest   t)
    (setq auto-compile-update-autoloads             t))
(setq load-prefer-newer t)
#+end_src

** compress byte compile warnings                                      :pac:
#+begin_src emacs-lisp :tangle yes
(setq byte-compile-warnings nil
    gnutls-min-prime-bits 4096)
#+end_src

** keep auto backup files                                             :edit:
File of the same name but with a tilda ~ at the end

#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "~/.emacs.d/backup/"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+end_src

** keep auto save files                                               :edit:
File of the same name but with # at both sides
#+begin_src emacs-lisp :tangle yes
(setq auto-save-default t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/backup/" t)))
#+end_src

* DONE UI
** theme                                                         :theme:org:
Remove theme-specific org-mode headline font settings
#+begin_src emacs-lisp :tangle yes
(use-package spacemacs-theme
    :defer t
    :if window-system
    :init
    (load-theme 'spacemacs-light t)
    (set-face-attribute 'default nil :font "Consolas-11")
    (custom-theme-set-faces
       'spacemacs-light
       '(org-document-title ((t (:weight bold :height 1.2))))
       '(org-level-1 ((t (:weight semi-bold :height 1.2))))
       '(org-level-2 ((t (:weight semi-bold :height 1.0))))
       '(org-level-3 ((t (:weight normal :height 1.0))))
       '(org-level-4 ((t (:weight normal :height 1.0))))
       '(org-level-5 ((t (:weight normal :height 1.0))))))
#+end_src

** enable Y/N answer
#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** which-key
display available shortkeys in minibuffer popup

#+begin_src emacs-lisp :tangle yes
(use-package which-key
    :defer 2
    :diminish which-key-mode
    :config (which-key-mode))
#+end_src

** ivy                                                            :edit:ivy:
use ivy fuzzy search (except in swiper) and flx package for better sorting
#+begin_src emacs-lisp :tangle yes
(use-package flx)
(use-package ivy
    :defer 1
    :config
    (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-re-builders-alist
            '((swiper . ivy--regex-plus)
              (t . ivy--regex-fuzzy)))
        (setq ivy-initial-inputs-alist nil)
        (setq enable-recursive-minibuffers t)))
#+end_src

** swiper                                                         :edit:ivy:
bind search hotkey to swiper

#+begin_src emacs-lisp :tangle yes
(use-package swiper
    :defer 1
    :bind ("C-s" . 'swiper))
#+end_src

** counsel                                                             :ivy:
#+begin_src emacs-lisp :tangle yes
(use-package counsel
    :defer 1
    :bind
    (("C-x C-f" . counsel-find-file)
     ("C-h b" . counsel-descbinds)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     ("M-x" . counsel-M-x)))
#+end_src

** customize modeline                                                :theme:
understand what all areas stand for
#+begin_src emacs-lisp :tangle yes
(column-number-mode t)
#+end_src

** split window with different buffers                                :edit:
#+begin_src emacs-lisp :tangle yes
(defun hsplit-last-buffer()
    (interactive)
    (split-window-below)
    (other-window 1 nil)
    (switch-to-next-buffer))
(global-set-key (kbd "C-x 2") 'hsplit-last-buffer)
(defun vsplit-last-buffer()
    (interactive)
    (split-window-right)
    (other-window 1 nil)
    (switch-to-next-buffer))
(global-set-key (kbd "C-x 3") 'vsplit-last-buffer)
#+end_src

* DONE Editor
** curson position highlighting                                       :edit:
#+begin_src emacs-lisp :tangle yes
(use-package beacon
    :defer t
    :config (beacon-mode 1))
#+end_src

** move cursor line by line                                           :edit:
#+begin_src emacs-lisp :tangle yes
(setq scroll-preserve-screen-position 1)
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+end_src

** parentheses                                                        :edit:
There is smartparens mode worth noting.

#+begin_src emacs-lisp :tangle yes
(show-paren-mode 1)
(setq show-paren-delay 0)
(electric-pair-mode 1)
#+end_src

** page break line                                                     :TBC:
#+begin_src emacs-lisp :tangle no
(use-package page-break-lines
    :diminish page-break-lines-mode
    :config (global-page-break-lines-mode 1))
#+end_src

** trailing space                                                     :edit:
auto remove on save

#+begin_src emacs-lisp :tangle yes
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** toggle (multiple) line comment                                   :edit:c:
global keybind will be shadowed by local mode keymap
#+begin_src emacs-lisp :tangle yes
(defun comment-or-uncomment-region-or-line ()
  (interactive)
  (let ((start (line-beginning-position))
        (end (line-end-position)))
    (when (or (not transient-mark-mode) (region-active-p))
      (setq start (save-excursion
                    (goto-char (region-beginning))
                    (beginning-of-line)
                    (point))
            end (save-excursion
                  (goto-char (region-end))
                  (end-of-line)
                  (point))))
    (comment-or-uncomment-region start end)))
(add-hook 'c-mode-hook (lambda () (setq comment-start "//"
                                        comment-end   "")))
(defun my-c-mode-keybind ()
    (local-set-key (kbd "M-;") 'comment-or-uncomment-region-or-line))
(add-hook 'c-mode-hook 'my-c-mode-keybind)
;;(global-set-key (kbd "C-c c") 'comment-or-uncomment-region-or-line)
#+end_src

** undo-tree                                                          :edit:
#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
    :diminish undo-tree-mode
    :defer t
    :bind ("C-x u" . undo-tree-visualize)
    :config (global-undo-tree-mode))
#+end_src

** TODO flyspell                                                      :edit:
** prelude-like C-a behavior                                          :edit:
first press to the non-whitespace char of a line and then to beginning
shadowed by org-beginning-of-line in org-mode
#+begin_src emacs-lisp :tangle yes
(defun smarter-move-beginning-of-line (arg)
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
#+end_src

** global auto revert mode                                            :edit:
#+begin_src emacs-lisp :tangle yes
(global-auto-revert-mode t)
#+end_src

** highlight current symbol
#+begin_src emacs-lisp :tangle yes
(use-package highlight-symbol
    :config
    (global-set-key [(control f3)] 'highlight-symbol-next)
    (global-set-key [f3] 'highlight-symbol)
    (global-set-key [(shift f3)] 'highlight-symbol-prev)
    (global-set-key [(meta f3)] 'highlight-symbol-query-replace))
#+end_src

* File Management
** DONE dired                                                    :TBC:dired:
#+begin_src emacs-lisp :tangle yes
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)
#+end_src

** TODO !!! jump to any file in a deep folder structure         :dired:perf:
maybe bookmark is used?

** DONE remember last cursor position in dired & file                :dired:
someone had recentf-mode is activated, so this function is enabled.
just need to gitignore the recentf file in the .emacs.d folder

* Programming
** DONE special type syntax highlighting                       :edit:c:make:
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.can\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.cin\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.mak\\'" . makefile-mode))
#+end_src

** TODO flycheck                                                    :edit:c:
** WIP yasnippet                                                    :edit:c:
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet-snippets)
(use-package yasnippet
    :commands (yas-minor-mode)
    :init
    (progn (add-hook 'prog-mode-hook #'yas-minor-mode))
    :config
    (yas-reload-all))
#+end_src

** DONE indentation                                             :edit:c:TBC:
disable tab to indent globally

#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4) ; default is 8
(defvaralias 'c-basic-offset 'tab-width)
(setq c-default-style "linux")
(c-set-offset 'case-label '+)
#+end_src

** WIP company + clang                                          :c:edit:TBC:
if/for statement auto completion

possible sublime-like fuzzy completion
need to input no candidate words
input ignore casing

#+begin_src emacs-lisp :tangle yes
(use-package company
    :defer t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (use-package company-irony :ensure t :defer t)
    (setq company-idle-delay            0
	    company-minimum-prefix-length   2
	    company-show-numbers            t
	    company-tooltip-limit           20
	    company-dabbrev-downcase        nil)
	    ;company-backends                '((company-irony company-gtags)))
    :bind ("C-;" . company-complete-common))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package irony
    :defer t
    :init
    (add-hook 'c-mode-hook 'irony-mode)
    :config
    (when (win-p)
        (when (boundp 'w32-pipe-read-delay)
            (setq w32-pipe-read-delay 0))
            ;; Set the buffer size to 64K on Windows (from the original 4K)
        (when (boundp 'w32-pipe-buffer-size)
            (setq irony-server-w32-pipe-buffer-size (* 64 1024))))
    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
        (define-key irony-mode-map [remap completion-at-point]
            'irony-completion-at-point-async)
        (define-key irony-mode-map [remap complete-symbol]
            'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+end_src

** DONE multiple line editing                                         :edit:
#+begin_src emacs-lisp :tangle yes
(use-package multiple-cursors
    :defer 5
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines))
#+end_src

** DONE source code indexing/navigation                                  :c:
#+begin_src emacs-lisp :tangle yes
(use-package helm-gtags
    :hook cc-mode
    :bind
    (("C-j" . helm-gtags-select)
     ("M-." . helm-gtags-dwim)
     ("M-," . helm-gtags-pop-stack)
     ("C-c <" . helm-gtags-previous-history)
     ("C-c >" . helm-gtags-next-history))
    :config
    (helm-gtags-mode 1)
    (setq
         helm-gtags-ignore-case t
         helm-gtags-auto-update t
         helm-gtags-use-input-at-cursor t
         helm-gtags-pulse-at-cursor t
         helm-gtags-prefix-key "\C-cg"
         helm-gtags-suggested-key-mapping t))
#+end_src

*** function arguments hinting                                     :edit:c:
*** GNU global + helm-gtags                                        :c:helm:
prefix + shortkey
*** add project path (multiple folders)

** run build.bat from minibuffer                                    :c:make:
build.bat is not available yet
** WIP helm                                                           :helm:
helm-ag for searching
helm window in split windows
#+begin_src emacs-lisp :tangle yes
(use-package helm
    :config
    (setq helm-split-window-in-side-p t))
#+end_src

* DONE Org mode
** add org agenda path to custom settings                              :org:
this one is system-specific and should be defined in the custom settings

#+begin_src emacs-lisp :tangle no
(setq org-agenda-files '("~/org"))
#+end_src

** use org-indent-mode                                                 :org:
#+begin_src emacs-lisp :tangle yes
(setq org-startup-indented t)
#+end_src

** add workflow states with hotkeys                                    :org:
#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords
    '((sequence "TODO" "WIP" "|" "DONE(d)")))
(setq org-todo-keyword-faces
      '(("TODO" . "red")))
(setq org-todo-keyword-faces
      '(("WIP" . "blue")))
;(setq org-todo-keyword-faces
;      '(("HOLD" . "red")))
#+end_src

** close TODO tasks with timestamp                                     :org:
add file-specific settings:
" #+STARTUP: overview logdone "

** no newline before new heading                                       :org:
without the added newline on top
#+begin_src emacs-lisp :tangle yes
(setf org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)) )
#+end_src

** open files with external app                                        :org:
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook
    '(lambda ()
        (setq org-file-apps
            (append '(
                      ("\\.png\\'" . default)
                      ("\\.doc[x]?\\'" . default)
                      ("\\.xls[x]?\\'" . default)
                      ("\\.ppt[x]?\\'" . default)
                      ) org-file-apps ))))
#+end_src

** org-agenda                                                          :org:
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook
    '(lambda ()
        (local-set-key (kbd "C-c a") 'org-agenda)))
(setq org-agenda-skip-scheduled-if-done 1)
#+end_src

* DONE Notes
** emacs lisp
this is a thing for elisp learning: ";; -*- lexical-binding: t -*-"
